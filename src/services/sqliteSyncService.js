import ApiService from './apiService.js';
import SqliteService from './sqliteService.js';
import AuthManager from './authManager.js';
import { getActiveUsers } from '../config/users.js';

class SqliteSyncService {
  constructor() {
    this.apiService = new ApiService();
    this.dbService = new SqliteService();
    this.authManager = new AuthManager();
    this.isInitialized = false;
  }

  // Inicializar el servicio
  async initialize() {
    if (this.isInitialized) return true;

    try {
      // Conectar a la base de datos SQLite
      const connected = await this.dbService.connect();
      if (!connected) {
        console.log('‚ö†Ô∏è No se pudo conectar a SQLite, usando solo API');
        return false;
      }

      // Crear tablas
      await this.dbService.createTables();

      // Inicializar AuthManager
      await this.authManager.initialize();

      // Sincronizar usuarios
      const users = getActiveUsers();
      for (const user of users) {
        await this.dbService.syncUser(user);
      }

      this.isInitialized = true;
      console.log('‚úÖ SqliteSyncService inicializado correctamente');
      return true;
    } catch (error) {
      console.error('‚ùå Error inicializando SqliteSyncService:', error.message);
      return false;
    }
  }

  // Sincronizar datos de un usuario espec√≠fico
  async syncUserData(userEmail, userPassword, fromDate, toDate) {
    try {
      console.log(`üîÑ Sincronizando datos para ${userEmail} desde ${fromDate} hasta ${toDate}`);

      // Obtener datos de la API
      const [ordersResult, productsResult, sessionsResult] = await Promise.all([
        this.apiService.getSaleOrders(userEmail, userPassword, fromDate, toDate),
        this.apiService.getSaleProducts(userEmail, userPassword, fromDate, toDate),
        this.apiService.getSessions(userEmail, userPassword, fromDate, toDate)
      ]);

      let syncedData = {
        orders: 0,
        products: 0,
        sessions: 0
      };

      // Sincronizar con la base de datos si est√° disponible
      if (this.isInitialized) {
        if (ordersResult.success && ordersResult.data) {
          const ordersSync = await this.dbService.syncSaleOrders(ordersResult.data, userEmail);
          if (ordersSync.success) syncedData.orders = ordersSync.synced;
        }

        if (productsResult.success && productsResult.data) {
          const productsSync = await this.dbService.syncSaleProducts(productsResult.data, userEmail);
          if (productsSync.success) syncedData.products = productsSync.synced;
        }

        if (sessionsResult.success && sessionsResult.data) {
          const sessionsSync = await this.dbService.syncSessions(sessionsResult.data, userEmail);
          if (sessionsSync.success) syncedData.sessions = sessionsSync.synced;
        }
      }

      return {
        success: true,
        data: {
          orders: ordersResult.success ? ordersResult.data : [],
          products: productsResult.success ? productsResult.data : [],
          sessions: sessionsResult.success ? sessionsResult.data : [],
          synced: syncedData
        }
      };
    } catch (error) {
      console.error(`‚ùå Error sincronizando datos para ${userEmail}:`, error.message);
      return { success: false, error: error.message };
    }
  }

  // Sincronizar datos de todos los usuarios
  async syncAllUsers(fromDate, toDate) {
    try {
      console.log(`üîÑ Sincronizando datos de todos los usuarios desde ${fromDate} hasta ${toDate}`);

      const users = getActiveUsers();
      const results = [];

      for (const user of users) {
        try {
          const result = await this.syncUserData(user.email, user.password, fromDate, toDate);
          results.push({
            user: user.email,
            success: result.success,
            synced: result.data?.synced || { orders: 0, products: 0, sessions: 0 }
          });
        } catch (error) {
          console.error(`‚ùå Error sincronizando ${user.email}:`, error.message);
          results.push({
            user: user.email,
            success: false,
            error: error.message
          });
        }
      }

      return {
        success: true,
        data: {
          users: results,
          totalSynced: results.reduce((sum, r) => 
            sum + (r.synced?.orders || 0) + (r.synced?.products || 0) + (r.synced?.sessions || 0), 0
          )
        }
      };
    } catch (error) {
      console.error('‚ùå Error sincronizando todos los usuarios:', error.message);
      return { success: false, error: error.message };
    }
  }

  // Obtener estad√≠sticas (prioriza base de datos si est√° disponible)
  async getStats(fromDate, toDate, userEmail = null, userPassword = null) {
    try {
      // Si tenemos base de datos, intentar obtener datos de ah√≠ primero
      if (this.isInitialized) {
        console.log('üìä Obteniendo estad√≠sticas desde base de datos SQLite...');
        const dbResult = await this.dbService.getStatsFromDB(fromDate, toDate, userEmail);
        if (dbResult.success) {
          console.log('‚úÖ Estad√≠sticas obtenidas desde base de datos SQLite');
          return dbResult;
        }
      }

      // Si no hay base de datos o fall√≥, usar API
      console.log('üìä Obteniendo estad√≠sticas desde API...');
      return await this.apiService.getStats(fromDate, toDate, userEmail, userPassword);
    } catch (error) {
      console.error('‚ùå Error obteniendo estad√≠sticas:', error.message);
      return { success: false, error: error.message };
    }
  }

  // Obtener √≥rdenes (prioriza base de datos si est√° disponible)
  async getOrders(fromDate, toDate, userEmail = null, userPassword = null) {
    try {
      // Si tenemos base de datos, intentar obtener datos de ah√≠ primero
      if (this.isInitialized) {
        console.log('üì¶ Obteniendo √≥rdenes desde base de datos SQLite...');
        const dbResult = await this.dbService.getOrdersFromDB(fromDate, toDate, userEmail);
        if (dbResult.success) {
          console.log('‚úÖ √ìrdenes obtenidas desde base de datos SQLite');
          return dbResult;
        }
      }

      // Si no hay base de datos o fall√≥, usar API
      console.log('üì¶ Obteniendo √≥rdenes desde API...');
      return await this.apiService.getSaleOrders(userEmail, userPassword, fromDate, toDate);
    } catch (error) {
      console.error('‚ùå Error obteniendo √≥rdenes:', error.message);
      return { success: false, error: error.message };
    }
  }

  // Obtener estado de sincronizaci√≥n
  async getSyncStatus() {
    try {
      if (!this.isInitialized) {
        return {
          success: true,
          data: {
            initialized: false,
            message: 'Base de datos SQLite no disponible, usando solo API'
          }
        };
      }

      // Obtener estad√≠sticas de la base de datos
      const result = await this.dbService.getSyncStatus();
      return result;
    } catch (error) {
      console.error('‚ùå Error obteniendo estado de sincronizaci√≥n:', error.message);
      return { success: false, error: error.message };
    }
  }

  // Sincronizar tiendas seleccionadas
  async syncSelectedStores(storeIds, fromDate, toDate) {
    try {
      console.log(`üîÑ Sincronizando tiendas seleccionadas: ${storeIds.join(', ')}`);

      const results = [];
      
      for (const storeId of storeIds) {
        try {
          // Obtener token para la tienda
          const tokenResult = await this.authManager.getTokenForStore(storeId);
          
          if (!tokenResult.success) {
            // Intentar renovar token
            const renewResult = await this.authManager.renewTokenForStore(storeId);
            if (!renewResult.success) {
              results.push({
                storeId,
                success: false,
                error: 'No se pudo obtener token v√°lido'
              });
              continue;
            }
          }

          // Obtener datos de la API para esta tienda
          const user = getActiveUsers().find(u => u.storeId === storeId);
          if (!user) {
            results.push({
              storeId,
              success: false,
              error: 'Usuario no encontrado'
            });
            continue;
          }

          const [ordersResult, productsResult, sessionsResult] = await Promise.all([
            this.apiService.getSaleOrders(user.email, user.password, fromDate, toDate),
            this.apiService.getSaleProducts(user.email, user.password, fromDate, toDate),
            this.apiService.getSessions(user.email, user.password, fromDate, toDate)
          ]);

          let syncedData = {
            orders: 0,
            products: 0,
            sessions: 0
          };

          // Sincronizar con la base de datos
          if (this.isInitialized) {
            if (ordersResult.success && ordersResult.data) {
              const ordersSync = await this.dbService.syncSaleOrders(ordersResult.data, user.email);
              if (ordersSync.success) syncedData.orders = ordersSync.synced;
            }

            if (productsResult.success && productsResult.data) {
              const productsSync = await this.dbService.syncSaleProducts(productsResult.data, user.email);
              if (productsSync.success) syncedData.products = productsSync.synced;
            }

            if (sessionsResult.success && sessionsResult.data) {
              const sessionsSync = await this.dbService.syncSessions(sessionsResult.data, user.email);
              if (sessionsSync.success) syncedData.sessions = sessionsSync.synced;
            }
          }

          results.push({
            storeId,
            storeName: user.storeName,
            success: true,
            synced: syncedData
          });

        } catch (error) {
          console.error(`‚ùå Error sincronizando tienda ${storeId}:`, error.message);
          results.push({
            storeId,
            success: false,
            error: error.message
          });
        }
      }

      return {
        success: true,
        results,
        summary: {
          total: storeIds.length,
          successful: results.filter(r => r.success).length,
          failed: results.filter(r => !r.success).length
        }
      };
    } catch (error) {
      console.error('‚ùå Error sincronizando tiendas seleccionadas:', error.message);
      return { success: false, error: error.message };
    }
  }

  // Autenticar todas las tiendas
  async authenticateAllStores() {
    try {
      return await this.authManager.authenticateAllStores();
    } catch (error) {
      console.error('‚ùå Error autenticando tiendas:', error.message);
      return { success: false, error: error.message };
    }
  }

  // Obtener estado de autenticaci√≥n
  async getAuthenticationStatus() {
    try {
      return await this.authManager.getAuthenticationStatus();
    } catch (error) {
      console.error('‚ùå Error obteniendo estado de autenticaci√≥n:', error.message);
      return { success: false, error: error.message };
    }
  }

  // Obtener estad√≠sticas mejoradas con m√°s insights
  async getEnhancedStats(fromDate, toDate, storeIds = null) {
    try {
      let whereClause = 'WHERE order_date BETWEEN ? AND ?';
      let params = [fromDate, toDate];

      if (storeIds && storeIds.length > 0) {
        const storeIdsStr = storeIds.map(id => `'${id}'`).join(',');
        whereClause += ` AND store_id IN (${storeIdsStr})`;
      }

      // Estad√≠sticas b√°sicas
      const basicStats = await this.dbService.getStatsFromDB(fromDate, toDate);

      if (!basicStats.success) {
        return basicStats;
      }

      // Estad√≠sticas adicionales
      const additionalStats = await this.getAdditionalInsights(fromDate, toDate, storeIds);

      return {
        success: true,
        data: {
          ...basicStats.data,
          ...additionalStats
        }
      };
    } catch (error) {
      console.error('‚ùå Error obteniendo estad√≠sticas mejoradas:', error.message);
      return { success: false, error: error.message };
    }
  }

  // Obtener insights adicionales
  async getAdditionalInsights(fromDate, toDate, storeIds = null) {
    try {
      let whereClause = 'WHERE order_date BETWEEN ? AND ?';
      let params = [fromDate, toDate];

      if (storeIds && storeIds.length > 0) {
        const storeIdsStr = storeIds.map(id => `'${id}'`).join(',');
        whereClause += ` AND store_id IN (${storeIdsStr})`;
      }

      // Horarios de mayor venta
      const hourlyStats = await this.dbService.db.all(`
        SELECT 
          strftime('%H', order_date) as hour,
          COUNT(*) as order_count,
          SUM(total - COALESCE(discount, 0)) as total_amount
        FROM sale_orders 
        ${whereClause}
        GROUP BY strftime('%H', order_date)
        ORDER BY order_count DESC
        LIMIT 5
      `, params);

      // D√≠as de la semana m√°s rentables
      const dailyStats = await this.dbService.db.all(`
        SELECT 
          CASE strftime('%w', order_date)
            WHEN '0' THEN 'Domingo'
            WHEN '1' THEN 'Lunes'
            WHEN '2' THEN 'Martes'
            WHEN '3' THEN 'Mi√©rcoles'
            WHEN '4' THEN 'Jueves'
            WHEN '5' THEN 'Viernes'
            WHEN '6' THEN 'S√°bado'
          END as day_name,
          COUNT(*) as order_count,
          SUM(total - COALESCE(discount, 0)) as total_amount,
          AVG(total - COALESCE(discount, 0)) as avg_amount
        FROM sale_orders 
        ${whereClause}
        GROUP BY strftime('%w', order_date)
        ORDER BY total_amount DESC
      `, params);

      // Productos m√°s rentables por tienda
      const topProductsByStore = await this.dbService.db.all(`
        SELECT 
          sp.store_id,
          sp.name,
          COUNT(*) as times_sold,
          SUM(sp.total) as total_revenue,
          AVG(sp.price) as avg_price
        FROM sale_products sp
        JOIN sale_orders so ON sp.order_id = so.order_id
        ${whereClause.replace('order_date', 'so.order_date')}
        GROUP BY sp.store_id, sp.name
        ORDER BY sp.store_id, total_revenue DESC
      `, params);

      // M√©tricas de rendimiento por tienda
      const storePerformance = await this.dbService.db.all(`
        SELECT 
          store_id,
          COUNT(*) as total_orders,
          SUM(total - COALESCE(discount, 0)) as total_revenue,
          AVG(total - COALESCE(discount, 0)) as avg_order_value,
          MIN(order_date) as first_order,
          MAX(order_date) as last_order,
          COUNT(DISTINCT DATE(order_date)) as active_days
        FROM sale_orders 
        ${whereClause}
        GROUP BY store_id
        ORDER BY total_revenue DESC
      `, params);

      return {
        hourlyStats: hourlyStats.map(h => ({
          hour: h.hour,
          orderCount: parseInt(h.order_count),
          totalAmount: parseFloat(h.total_amount)
        })),
        dailyStats: dailyStats.map(d => ({
          dayName: d.day_name,
          orderCount: parseInt(d.order_count),
          totalAmount: parseFloat(d.total_amount),
          avgAmount: parseFloat(d.avg_amount)
        })),
        topProductsByStore: topProductsByStore.map(p => ({
          storeId: p.store_id,
          productName: p.name,
          timesSold: parseInt(p.times_sold),
          totalRevenue: parseFloat(p.total_revenue),
          avgPrice: parseFloat(p.avg_price)
        })),
        storePerformance: storePerformance.map(s => ({
          storeId: s.store_id,
          totalOrders: parseInt(s.total_orders),
          totalRevenue: parseFloat(s.total_revenue),
          avgOrderValue: parseFloat(s.avg_order_value),
          firstOrder: s.first_order,
          lastOrder: s.last_order,
          activeDays: parseInt(s.active_days)
        }))
      };
    } catch (error) {
      console.error('‚ùå Error obteniendo insights adicionales:', error.message);
      return {};
    }
  }

  // Limpiar datos antiguos (opcional)
  async cleanOldData(daysToKeep = 90) {
    try {
      if (!this.isInitialized) {
        return { success: false, error: 'Base de datos SQLite no inicializada' };
      }

      const result = await this.dbService.cleanOldData(daysToKeep);
      return result;
    } catch (error) {
      console.error('‚ùå Error limpiando datos antiguos:', error.message);
      return { success: false, error: error.message };
    }
  }
}

export default SqliteSyncService;
